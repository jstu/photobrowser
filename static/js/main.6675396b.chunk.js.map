{"version":3,"sources":["serviceWorker.js","components/PictureContainer.js","api.js","components/DetailView.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","PictureContainer","pic","Col","xl","lg","md","sm","xs","className","key","id","to","pathname","Card","style","width","height","border","Img","variant","src","thumbnailUrl","alt","title","Body","url","limit","a","fetch","response","json","fetchedPics","map","i","props","ok","Error","photos","photo","DetailView","useParams","useState","image","setImage","hasError","setErrors","useEffect","api","then","fetched","catch","error","Container","Button","Figure","Image","Caption","albumId","App","pics","setPics","currentLimit","setCurrentLimit","path","render","Row","onClick","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6675396b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nfunction PictureContainer({pic}) {\r\n    return (\r\n            <Col xl={2} lg={2} md={4} sm={4} xs={6} className=\"thumbcontainer\"> \r\n                <Link \r\n                    key={pic.id}\r\n                    to={{\r\n                        pathname: `/img/${pic.id}`,\r\n                    }}>\r\n                    <Card style={{ width: 'auto', height: 'auto', border: '0px'}}>\r\n                    <Card.Img variant=\"top\" src={pic.thumbnailUrl} alt={pic.title}/>\r\n                    <Card.Body className=\"cardbody\">\r\n                        {pic.title}\r\n                    </Card.Body>\r\n                    </Card>\r\n                </Link>\r\n            </Col>\r\n    )\r\n}\r\n\r\nexport default PictureContainer;","import React from 'react';\r\nimport PictureContainer from './components/PictureContainer';\r\n\r\nconst url = \"https://jsonplaceholder.typicode.com\"\r\n\r\nasync function fetchPhotos (limit) {\r\n    let response = await fetch(`${url}/photos?_limit=${limit}`);\r\n    const json = await response.json();\r\n\r\n    const fetchedPics = \r\n        json.map((pic, i) => {\r\n\r\n                const props = {\r\n                    pic: pic,\r\n                }\r\n\r\n                return <PictureContainer {...props}/>;\r\n            }\r\n        )\r\n\r\n    return fetchedPics;\r\n}\r\n\r\nasync function fetchSinglePhoto (id) {\r\n    let response = await fetch(`${url}/photos/${id}`);\r\n    if(response.ok) {\r\n        const json = await response.json();\r\n        return json;\r\n    } else {\r\n        throw new Error(\"failed to fetch image\");\r\n    }\r\n}\r\n\r\nexport default {\r\n    photos: fetchPhotos,\r\n    photo: fetchSinglePhoto,\r\n};","import React, {useState, useEffect} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Figure from 'react-bootstrap/Figure';\r\nimport api from '../api';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\nimport {\r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\nfunction DetailView() {\r\n    const {id} = useParams();\r\n    const [image, setImage] = useState(\"\");\r\n    const [hasError, setErrors] = useState(false);\r\n\r\n    useEffect(() => {\r\n        api.photo(id)\r\n        .then(fetched => {\r\n            setImage(fetched);\r\n        })\r\n        .catch((error) => {\r\n            setErrors(true);\r\n        });\r\n    }, [])\r\n\r\n    if (hasError) {\r\n        return (\r\n            <Container>\r\n                <h1 className=\"detailstitle\">Image not found</h1>\r\n            </Container>\r\n        )\r\n    } else {\r\n        return (\r\n            <Container>\r\n                <Link to={{ pathname: `/`}}>\r\n                    <Button variant=\"info\" className=\"backbutton\">Back</Button>\r\n                </Link>\r\n                <Container className=\"detailscontainer\">\r\n                    <Figure>\r\n                    <Figure.Image\r\n                        src={image.url}\r\n                    />\r\n                    <Figure.Caption>\r\n                        {image.title}\r\n                    </Figure.Caption>\r\n\r\n                    <Figure.Caption>\r\n                        Album: {image.albumId}\r\n                    </Figure.Caption>\r\n                    </Figure>\r\n                </Container>\r\n\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DetailView;","import React, {useState, useEffect} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport DetailView from '../components/DetailView';\nimport api from '../api';\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nconst App = () => {\n\n  const [hasError, setErrors] = useState(false);\n  const [pics, setPics] = useState([]);\n  const [currentLimit, setCurrentLimit] = useState(12);\n  const limitMultiplier = 12;\n\n  useEffect(() => {\n    api.photos(currentLimit)\n    .then(fetched => {\n      setPics(fetched);\n    })\n  }, [currentLimit])\n\n  return (\n    <Container className=\"appcontainer\">\n      <Switch>\n        <Route path=\"/img/:id\" render={() => (\n            <DetailView {...pics} />\n          )}\n        />\n\n        <Route path=\"/\">\n          <Row className=\"justify-content-center thumbnails\">\n              {pics}\n          </Row>\n\n          <div className=\"buttonContainer\">\n            <Button variant=\"info\" onClick={() => {\n                setCurrentLimit(currentLimit + limitMultiplier)\n            }}>Load more</Button>\n          </div>\n        </Route>\n\n      </Switch>\n    </Container>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App'\nimport {\n  HashRouter as Router,\n} from \"react-router-dom\";\n\n\n\nReactDOM.render(<Router><App /> </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}